public class Sorting {
  
  public Sorting() {}
  
  /*___________________________________________ HEAP SORT ___________________________________________*/
  
  public static void heap(int[] arr) {
    
    //build the max-heap and rearrange the array to reflect this
    for (int i = arr.length / 2 + 1; i >= 0; i--)
      buildHeap(arr, arr.length, i);
    
    //take the elements one by one from the heap and sort them within the array
    for (int i=arr.length-1; i >= 0; i--) {
      swap(arr, 0, i); //moves the current root of the heap (the end of the array) to be the first element in the array
      buildHeap(arr, i, 0); //rebuilds the heap without the extracted element (previously the root of the array)
    }
  }
  
  /* builds the max-heap of a subtree given the array
   * n - the size of the array
   * the i - the index of the root of the heap
   */
  public static void buildHeap(int[] arr, int n, int i) {
    int max = i; //initially sets the max as the root of the heap
    int l = 2*i+1; //defines the left child at the index 2*i+1
    int r = 2*i; //defines the right child at the index 2*i+1
    
    //if the left child is larger than the root set the max accordingly
    if (l < n && arr[l] > arr[max])
      max = l;
    
    //if the right child is larger than the root set the max accordingly
    if (r < n && arr[r] > arr[max])
      max = r;
    
    //if the max wasn't the root of the tree, swap the max node to the root index, then recursively continue to do this for the rest of the subtree
    if (max != i) {
      swap(arr, i, max);
      buildHeap(arr, n, max);
    }
  }
  
  
  
  
  
  
  /*___________________________________________ QUICK SORT ___________________________________________*/
  
  public static void quick(int[] arr) {
    qSort(arr, 0, arr.length-1); //call the qSort() method starting with the beginning and end of the array
  }
  
  /* recursively sorts the array based on the partitioning index
   * seperates the sorting algorithm into a lower half and a higher half and recursively sorts through it
   */
  public static void qSort(int[] arr, int first, int last) {
    //the if statement acts as the base case, once the array is sorted the first and last values should be flipped which breaks the recursion
    if (first < last) {
      int partitionIndex = partition(arr, first, last);
      
      qSort(arr, first, partitionIndex-1); //sort elements before partition
      qSort(arr, partitionIndex+1, last);  //sort elements after partition
    }
  }
  
  /* takes pivot element and puts it in the correct place
   * moves all elements less than the pivot before it in the array
   * moves all elements greater than the pivot after it in the array
   * returns the index of the next pivot
   */
  public static int partition(int[] arr, int first, int last) {
    int i=first-1; //index going from left to right
    int j=last+1; //index going from right to left
    int pivot = arr[(first+last)/2]; //pivot as middle element
    while (true) {
      do {
        i++; //iterates through the elements before the pivot to swap higher elements to the right
      } while (arr[i] < pivot);
      do {
        j--; //iterates through the elements before the pivot to swap lower elements to the left
      } while (arr[j] > pivot);
      if (i < j)
        swap(arr,i,j);
      else return j; //breaks the while true loop once all elements get swapped as needed
    }
  }
  
  
  
  
  
  
  /*___________________________________________ MERGE SORT __________________________________________*/
  // n-1 represents the index of the final element of the array (n is the length), iterative implementation
  public static void merge(int[] arr) {
    int n = arr.length; //sets as length of array to be used later
    int currSize; //the current size of the arrays to be merged
    int l,m,r; //the starting index for the left subarray, the endpoint of the left subarray (m+1 is start of right), and endpoint of right subarray
    
    //merge the arrays starting at arrays with a size of 1 and increasing with each iteration, currSize doubles each pass
    for (currSize = 1; currSize <= n-1; currSize = 2*currSize) {
      //determines start and end indeces for different subarrays of size currSize
      for (l = 0; l < n-1; l += 2*currSize) {
        m = l + currSize - 1; //endpoint of left subarray, m+1 is startind index of right subarray
        r = Math.min(l+2*currSize-1, n-1); //sets endpoint of right subarray to either the end of the original array or if a subarray accounted for accordingly
        mSort(arr,l,m,r); //merge subarrays accordingly
      }
    }
  }
  
  /* helper method that takes the array, middle index, left and right halves and merges the array
   * arr[l --> m] for left half and arr[m+1 --> r] for right half
   */
  public static void mSort(int[] arr, int l, int m, int r) {
    int i, j, k; //iterative variables through the temp arrays and for merging
    int n1 = m-l+1; //represents size of left array
    int n2 = r-m; //size of right array
    
    //temporary arrays to merge
    int[] left = new int[n1];
    int[] right = new int[n2];
    
    //copy data into left and right temporary arrays
    for (i=0; i<n1; i++)
      left[i] = arr[l+i];
    for (j=0; j<n2; j++)
      right[j] = arr[m+1+j];
    
    i=0; j=0; k=l; //reset iterative variables
    
    //merge temporary arrays into original
    //compares the elements in the left array to the elements in the right array and inserts the smaller elements first
    while (i<n1 && j<n2) {
      if (left[i] < right[j]) {
        arr[k] = left[i];
        i++;
      } else {
        arr[k] = right[j];
        j++;
      }
      k++;
    }
    
    //insert the remaining elements from the left array into the original if there are any
    while (i<n1) {
      arr[k] = left[i];
      i++; k++;
    }
    //insert the remaining elements from the right array into the original if there are any
    while (j<n2) {
      arr[k] = right[j];
      j++; k++;
    }
  }
  
  
  
  
  
  
  /*___________________________________________ HELPER METHODS ______________________________________*/
  
  //swaps two elements in an array given their indices
  public static void swap(int[] arr, int i, int j) {
    int temp = arr[i];
    arr[i] = arr[j];
    arr[j] = temp;
  }
  //returns a string of the given array in a readable form
  public static void printArray(int[] arr) {
    String s = "[ ";
    for (int a : arr)
      s += a + " ";
    s += "]";
    System.out.println(s);
  }
}
